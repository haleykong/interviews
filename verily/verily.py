################################################################################ Question 1################################################################################ You are writing a program to deduplicate logs from a server to make it easier# for humans to read.# Remove any duplicate logs within a sliding 10 second window# --# Sample Input:# --# 10 solar panel activated# 11 low battery warning# 12 tire one: low air pressure# 13 solar panel activated# 14 low battery warning# 21 solar panel activated# 35 solar panel activated## --# Sample Output# --# 10 solar panel activated# 11 low battery warning# 12 tire one: low air pressure# 35 solar panel activated# Can call this to retrieve next log (can assume blocking function).# def get_log() -> (int, str)WINDOW = 10logs = {}while True:    t, detail = get_log()    if detail not in logs.keys() or logs[detail] > t + WINDOW:        print(f"{t} {detail}")    logs[detail] = t# Question:# What do you see as an issue with this approach? What would you do to resolve?# Answer:# The dictionary with the different log types will get increasingly large.# This requires some sort of clean up (maybe removing logs that haven't# been used in x amount of time)################################################################################ Question 2################################################################################ We've realized any time we see duplicate logs within a sliding 10 second# window, there is an error. Remove these logs entirely from the output.# ---# Sample Input:# ---# 10 solar panel activated# 11 low battery warning# 12 tire one: low air pressure# 13 solar panel activated# 14 low battery warning# 21 solar panel activated# 35 solar panel activated# <no more messages received for another 30 seconds># 65 foo## ---# Sample Output:# ---# 12 tire one: low air pressure# 35 solar panel activated# Haley's Original CodeWINDOW = 10logs = {}while True:    t, d = get_log()    if d not in logs.keys():        logs[d] = [t]    elif logs[d][-1] < t - WINDOW:        logs[d].append(t)    else:        logs[d].append(t)        if len(logs[d] >= 3) and logs[d][-3] < logs[d][-2] - WINDOW:            print(f"{logs[d][-2]} {d}")# Haley's Refactored CodeWINDOW = 10logs = {}while True:    t, d = get_log()    # Add log to logs dictionary    if d not in logs.keys():        logs[d] = [t]    else:        logs[d].append(t)    # Check if outside of 10-second window    if len(logs[d] >= 3) and logs[d][-3] < logs[d][-2] - WINDOW:        print(f"{logs[d][-2]} {d}")